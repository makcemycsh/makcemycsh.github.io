{"version":3,"sources":["camera.js"],"names":["init","context","window","AudioContext","webkitAudioContext","console","log","$","each","Camera","this","brightness","contrast","volume","close","_classCallCheck","$selector","find","active","buffer","timer","selector","video","val","initAudioContext","$controls","filter","css","clearInterval","muted","resetStyles","_this","addClass","resrRange","openAnimation","initCart","chart","update","_this2","node","createScriptProcessor","analyser","createAnalyser","bands","Uint8Array","frequencyBinCount","source","createMediaElementSource","destination","getByteFrequencyData","setInterval","Chart","type","data","labels","datasets","connect","borderWidth","barStrokeWidth","backgroundColor","options","legend","display","scales","xAxes","ticks","gridLines","getBoundingClientRect","positionInfo","height","width","widthWindow","document","documentElement","clientWidth","hightWindow","clientHeight","left","widthEl","top","heightEl","max","moveLeft","moveTop","scale","transform","setTimeout","_this3","z-index","_this4","keydown","e","key","clouse","open","bind","on","debounce","changeContrast","changeBrightness","changeVolume"],"mappings":"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","file":"camera.js","sourcesContent":["function init() {\n  let context = new (window.AudioContext || window.webkitAudioContext)();\n\n  console.log(context);\n  $(\".js-camera\").each(function () {\n    new Camera($(this), context);\n  });\n}\n\nconst $controls = {\n  close: $(\".js-close\"),\n  brightness: $(\".js-camera-brightness\"),\n  contrast: $(\".js-camera-contrast\"),\n  volume: $(\".js-camera-volume\")\n};\n\nclass Camera {\n  constructor($selector, context) {\n    this.selector = $($selector);\n    this.video = $($selector).find('video');\n    this.active = false;\n    this.brightness = 100;\n    this.contrast = 100;\n    this.volume = 1;\n    this.buffer = 256;\n    this.timer = null;\n    this.chart = null;\n    this.handlers();\n\n    this.context = context;\n    this.initAudioContext();\n    this.initCart();\n\n  }\n\n  changeContrast() {\n    if (this.active) {\n      this.contrast = $($controls.contrast).val();\n      this.filter();\n    }\n  }\n\n  changeBrightness() {\n    if (this.active) {\n      this.brightness = $($controls.brightness).val();\n      this.filter();\n    }\n  }\n\n  changeVolume() {\n    if (this.active) {\n      this.volume = $($controls.volume).val();\n      this.video[0].volume = this.volume;\n    }\n  }\n\n  filter() {\n    this.selector.css(\"filter\", \"contrast(\" + this.contrast + \"%) brightness(\" + this.brightness + \"%)\");\n  }\n\n  clouse() {\n    clearInterval(this.timer);\n    $(\"body\").removeClass(\"mod-video\");\n    this.active = false;\n    this.video[0].muted = true;\n    this.resetStyles();\n  }\n\n  open() {\n    if (this.active) { return; }\n    this.active = true;\n    $(\"body\").addClass(\"mod-video\");\n    this.resrRange();\n    this.openAnimation();\n    this.video[0].muted = false;\n\n    this.initAudioContext();\n    this.initCart();\n    this.timer = setInterval(() => { this.chart.update();}, 100);\n\n  }\n\n  initAudioContext() {\n    this.node = this.context.createScriptProcessor(this.buffer, 1, 1);\n    this.analyser = this.context.createAnalyser();\n    this.analyser.fftSize = this.buffer;\n    this.bands = new Uint8Array(this.analyser.frequencyBinCount);\n    if (!this.source) this.source = this.context.createMediaElementSource(this.video[0]);\n    this.source.connect(this.analyser);\n    this.analyser.connect(this.node);\n    this.node.connect(this.context.destination);\n    this.source.connect(this.context.destination);\n    this.node.onaudioprocess = () => {\n      this.analyser.getByteFrequencyData(this.bands);\n      if (!this.video.paused) {\n        if (typeof this.update === \"function\") {\n          return this.update(this.bands);\n        } else {\n          return 0;\n        }\n      }\n    };\n  }\n\n  initCart() {\n    this.chart = new Chart($(\"#audio\"), {\n      type: 'bar',\n      data: {\n        labels: this.bands,\n        datasets: [{\n          data: this.bands,\n          borderWidth: 1,\n          barStrokeWidth: 2,\n          backgroundColor: \"yellow\"\n        }]\n      },\n      options: {\n        legend: {\n          display: false\n        },\n        scales: {\n          xAxes: [{\n            ticks: {\n              display: false,\n            },\n            gridLines: {\n              display: false\n            }\n          }],\n          yAxes: [{\n            ticks: {\n              display: false,\n              max: 200,\n              min: 0\n            },\n            gridLines: {\n              display: false\n            }\n          }]\n        }\n      }\n    });\n  }\n\n  openAnimation() {\n    console.log(\"openAnimation\");\n    let positionInfo = this.selector[0].getBoundingClientRect();\n    console.log(positionInfo);\n    let heightEl = positionInfo.height;\n    let widthEl = positionInfo.width;\n    let widthWindow = document.documentElement.clientWidth;\n    let hightWindow = document.documentElement.clientHeight;\n\n    let moveLeft = positionInfo.left - ((widthWindow - widthEl) / 2);\n    let moveTop = positionInfo.top - ((hightWindow - heightEl) / 2);\n    let scale = widthWindow / widthEl;\n\n    this.selector.css({\n      \"transform\": \"translate(\" + -moveLeft + \"px, \" + -moveTop + \"px) scale(\" + scale + \")\",\n      \"z-index\": \"999\"\n    });\n\n\n  }\n\n  resrRange() {\n    $($controls.contrast).val(this.contrast);\n    $($controls.brightness).val(this.brightness);\n    $($controls.volume).val(this.volume);\n  }\n\n  resetStyles() {\n    this.selector.css({\n      \"transform\": \"translate(0px, 0px) scale(1)\"\n    })\n    setTimeout(() => {\n      this.selector.css({\n        \"z-index\": \"1\"\n      })\n    }, 100)\n  }\n\n\n  handlers() {\n    $(document).keydown(e => {\n      if (e.key === \"Escape\") {\n        this.clouse();\n      }\n    });\n    this.selector.on(\"click\", this.open.bind(this));\n\n    $($controls.close).on(\"click\", this.clouse.bind(this));\n    $($controls.contrast).on(\"input\", debounce(this.changeContrast.bind(this), 5));\n    $($controls.brightness).on(\"input\", debounce(this.changeBrightness.bind(this), 5));\n    $($controls.volume).on(\"input\", debounce(this.changeVolume.bind(this), 5));\n  }\n}\n\n\ninit();"],"sourceRoot":"/source/"}