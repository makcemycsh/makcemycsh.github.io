{"version":3,"sources":["pointerevents.js"],"names":["is_touch_device","window","$","document","body","addClass","Handler","selector","_classCallCheck","this","$img","$imgWrap","height","minHeight","$scroll","oldLeft","maxHeight","left","top","oldTop","topLim","distance","curPosX","undefined","curPosY","difY","lastTap","events","zoom","getLim","moveScroll","parent","leftLim","width","newDistamce","oldDistance","e","clientX","clientY","curId","originalEvent","pointerId","curObj","filter","item","id","checkLim","x1","y1","x2","y2","getDistance","handlePinch","Math","sqrt","pow","persent","css","push","now","end","Date","getTime","start","length","timesince","zoomImg","console","_this","log","pointerMove","pointerDown","pointerUp"],"mappings":"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","file":"pointerevents.js","sourcesContent":["function is_touch_device() {\n  return !!('ontouchstart' in window);\n}\n\n// Проверяем тип устройства\nif (is_touch_device()) $(document.body).addClass('is-touch');\nelse $(document.body).addClass('no-touch');\n\nclass Handler {\n  constructor(selector) {\n    this.selector = $(selector);\n    this.$imgWrap = $('.js-img-wrapper', this.selector);\n    this.$img = $('img', this.$imgWrap);\n    this.$scroll = $('.js-scroll', this.selector);\n\n    this.height = this.$img.height();\n    this.minHeight = 300;\n    this.maxHeight = 1000;\n\n    this.left = 0;\n    this.top = 0;\n    this.oldLeft = 0;\n    this.oldTop = 0;\n    this.leftLim = 0;\n    this.topLim = 0;\n\n    this.curPosX = 0;\n    this.curPosY = 0;\n    this.difX = 0;\n    this.difY = 0;\n\n    this.events = [];\n    this.distance = 0;\n    this.oldDistance = undefined;\n    this.newDistamce = 0;\n\n    this.zoom = false;\n    this.lastTap = undefined;\n    this.hendlPointerEvents(this.selector);\n  }\n\n  zoomImg() {\n    if (this.zoom) {\n      this.$img.height(this.height);\n      this.zoom = !this.zoom;\n    } else {\n      this.height = this.$img.height();\n      this.maxHeight = 2 * this.height;\n      this.$img.height(this.maxHeight);\n      this.zoom = !this.zoom;\n    }\n    this.getLim();\n    this.moveScroll();\n  }\n\n  getLim() {\n    this.topLim = (this.$imgWrap.height() - this.$imgWrap.parent().height()) / 2;\n    this.leftLim = (this.$imgWrap.width() - this.$imgWrap.parent().width()) / 2;\n  }\n\n  checkLim() {\n    this.top >= this.topLim ? this.top = this.topLim : '';\n    this.top <= -this.topLim ? this.top = -this.topLim : '';\n\n    this.left >= this.leftLim ? this.left = this.leftLim : '';\n    this.left <= -this.leftLim ? this.left = -this.leftLim : '';\n  }\n\n  handlePinch() {\n    this.distance = this.newDistamce - this.oldDistance;\n    if (this.$img.height() + this.distance >= this.maxHeight) this.$img.height(this.maxHeight);\n    else if (this.$img.height() + this.distance <= this.minHeight) this.$img.height(this.minHeight);\n    else {this.$img.height(this.$img.height() + this.distance);}\n\n    this.oldDistance = this.newDistamce;\n    this.getLim();\n    this.moveScroll();\n    // $('.js-debag').append('<div>' + this.$img.height() + '</div>');\n\n  }\n\n  pointerMove(e) {\n    if (this.events.length === 1) {\n\n      this.left += e.clientX - this.oldLeft;\n      this.top += e.clientY - this.oldTop;\n\n      this.checkLim();\n      this.$img.css('transform', 'translate(' + this.left + 'px, ' + this.top + 'px)');\n      this.moveScroll();\n\n      this.oldLeft = e.clientX;\n      this.oldTop = e.clientY;\n\n    } else {\n\n      let curId = e.originalEvent.pointerId;\n      let curObj = this.events.filter(item => item.id === curId)[0];\n      curObj.clientX = e.clientX;\n      curObj.clientY = e.clientY;\n\n      let x1 = this.events[0].clientX;\n      let y1 = this.events[0].clientY;\n      let x2 = this.events[1].clientX;\n      let y2 = this.events[1].clientY;\n      this.newDistamce = this.getDistance(x1, y1, x2, y2);\n      if (!this.oldDistance) this.oldDistance = this.getDistance(x1, y1, x2, y2);\n      this.handlePinch();\n\n    }\n  }\n\n  getDistance(x1, y1, x2, y2) {\n    return Math.sqrt(Math.pow((x2 - x1), 2) + Math.pow((y2 - y1), 2));\n  }\n\n  moveScroll() {\n    let start = 15;\n    let end = 85;\n    let persent = (this.left + this.leftLim) * 100 / (this.leftLim * 2);\n    persent = persent * 0.7 + start;\n    persent > end ? persent = end : '';\n    persent < start ? persent = start : '';\n    this.$scroll.css('left', persent + '%');\n  }\n\n  pointerDown(e) {\n    this.events.push({\n      id: e.originalEvent.pointerId,\n      clientX: e.clientX,\n      clientY: e.clientY\n    });\n    let now = new Date().getTime();\n    this.curPosX = e.clientX;\n    this.curPosY = e.clientY;\n    this.oldLeft = e.clientX;\n    this.oldTop = e.clientY;\n\n    this.getLim();\n    if (this.events.length > 1) {\n      let timesince = now - this.lastTap;\n      if ((timesince < 300) && (timesince > 100)) this.zoomImg();\n      this.lastTap = new Date().getTime();\n    }\n  }\n\n  pointerUp(e) {\n    console.log('pointerup');\n    this.events = this.events.filter((item) => item.id !== e.originalEvent.pointerId);\n  }\n\n  hendlPointerEvents(selector) {\n    console.log('hendlPointerEvents');\n    if (is_touch_device()) {\n      selector.on('pointermove', e => this.pointerMove(e));\n      selector.on('pointerdown', e => this.pointerDown(e));\n      selector.on('pointerup pointercancel pointerleave pointerout', e => this.pointerUp(e));\n\n    }\n  }\n}"],"sourceRoot":"/source/"}